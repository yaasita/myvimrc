snippet     shebang
abbr        シェバンといつもの
	#!/usr/bin/perl
	use strict;
	use warnings;
	use feature qw(:5.10);
	use utf8;

snippet     dumper
abbr        変数dump
	use Data::Dumper;
	print Dumper [1, 2, 3];

snippet     Test::More
alias       test-template
abbr        perlテスト
	use Test::More;
	subtest '${1:hogesubtest}' => sub {
		plan "skip_all" => "reason";
		diag explain @one;
		is_deeply $one[0],[1,2];
		is &pattern_search(3)+0,120;
		ok(!defined $one[4]);
	};
	ok $got;                      # 真なら ok
	ok !$got;                     # not ok とかないので逆にしたい場合はこうすると吉
	is $got, $expected;           # ok $a eq $b のいい感じ版
	isnt $got, $expected;         # is の逆。ほぼつかわない。
	cmp_ok $got, '<' $expected;   # ok $a < $b のいい感じ版。'>=' とか '==' とか指定可能
	like $got, qr/$expected/;     # $got に qr/foo/ が含まれる場合に OK
	unlike $got, qr/$expected/;   # like の逆
	is_deeply $got, $expected;    # 構造体の比較。超使う。最強
	
	pass $test_name;              # ここ通過したら OK みたいな感じで使うけどあんまり使わない
	fail $test_name;              # ここ通過したら NG みたいな感じで使う
	
	note $message;                # メッセージを出力。make test とかでは出力されないので debug 用に使うイメージ
	diag $message;                # メッセージを出力
	explain $deep_structure;      # Data::Dumper::Dumper みたいなもん。出力自体はしないので note explain $got みたいにつかうとよい
	
	done_testing;

snippet     test-skip
abbr        perlテストSkip
	plan "skip_all" => "${1:reason}";

snippet     test-is
abbr        テストis一致
	is &pattern_search(3)+0,120;
	is min_cost(2),-1;

snippet     test-deeply
abbr        構造体比較
	is_deeply $one[0],[1,2];

snippet     test-like
abbr        正規表現で一致比較
	like $line[3],qr/Message-Id/;

snippet     url_encode
abbr        URLエンコード
	use URI::Escape;
	$unescaped = uri_unescape( $escaped ); #URLエンコード済み文字列のデコード
	$escaped = uri_escape( $unescaped ); #URLエンコード済み文字列へのエンコード

snippet     sort
abbr        ソート指定
	sort {$b->[2] <=> $a->[2]} @COMPANIES

snippet     open_write
abbr        ファイルOPEN書き込み
	open (my $wr,">:utf8", "tmp/05_wiki.redmine") or die $!;
	close $wr;

snippet     open_input
abbr        ファイルOPEN読み込み
	open (my $in,"<", "tmp/04_body.txt") or die $!;
	close $in;

snippet     cgi_test
abbr        CGIのテスト
	#!/usr/bin/perl
	print "Content-type:text/plain\n\n";
	print "CGI Test";


snippet     use_cgi
abbr        use CGI
	#!/usr/bin/perl
	use strict;
	use warnings;
	use CGI;
	use CGI::Carp qw(fatalsToBrowser);
	use CGI::Pretty;
	my $q = new CGI;
	print $q->header( -charset => "utf-8", );
	print <<"HEADER";
	<html>
		<head>
			<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
			<title></title>
		</head>
		<body>
	HEADER
	print "<h1>CGI</h1>";
	print <<"FOOTER";
		</body>
	</html>
	FOOTER

snippet     chdir_script_bin
alias       find_bin
abbr        スクリプト実行ファイルにchdir
	# 実行ディレクトリへ移動する
	use FindBin;
	chdir $FindBin::Bin or die $!;

snippet     copy
abbr        fileのコピー
	use File::Copy 'copy';
	copy $source, $destination or die $!;

snippet     pipe_open_write
abbr        パイプで渡して書き込み
	open (my $at,'|-',"at $+{hhmm} $+{month}/$+{day}/$+{year}") or die $!;
	print $at "touch /tmp/hoge";
	close $at;

snippet     use_encode
abbr        use Encode
	use Encode;
	use utf8;
	binmode STDOUT, ":utf8";
	open(my $fh, "<:encoding(CP932)","PRT-010-CSV-003-20150511.CSV") or die $!;
	#open(my $fh, "<:utf8)","PRT-010-CSV-003-20150511.CSV") or die $!;
	while(<$fh>){
		#print encode("UTF-8",$_);
		if (/米ドル・日本円取引所為替証拠金取引/){
			print;
		}
	}
	close $fh;

snippet     use_feature_say
abbr        say使うとき
	use feature qw(say);

snippet     here_document
abbr        ヒアドキュメント
	my $hoge = <<"EOS";
	abcdefg
	hijklmno
	EOS

snippet     sendmail
abbr        sendmail使うとき
	open (my $sendmailfh, "|-:encoding(UTF-8)", "/usr/sbin/sendmail -f $to $to") or die $!;
	print $sendmailfh &mail_heder($to,"テスト");
	close $sendmailfh;

snippet     base64
abbr        base64
	use MIME::Base64 qw/encode_base64 decode_base64/;
	print encode_base64($source_data);

snippet     Time::Piece
	use Time::Piece;
	use Time::Seconds;
	my $t = localtime;
	print $t->strftime("%Y%m%d");
	print $t + ONE_DAY;

snippet     File::Temp
	# CLEANUPを1にすると自動削除
	use File::Temp qw/ tempfile tempdir /;
	my $tempdir = tempdir(CLEANUP => 1);

snippet     pwd
	use Cwd;
	print getcwd();

snippet     namae_cap
abbr        正規表現の名前付きキャプチャ
	if ($line =~ /^(?<key>.*?)\s*=\s*(?<val>.*)$/) {
		printf "%s: %s\n", $+{key}, $+{val};
	}

snippet     getopt
alias       hikisuu
abbr        引数処理
	use Getopt::Long;
	# 単独
	my $opt_all = 0;
	my $opt_debug = 0;
	GetOptions('all' => \$opt_all, 'debug' => \$opt_debug);
	# 引数付きオプション
	my $name = 'John Doe';
	my $count = 1;
	GetOptions('name=s' => \$name, 'count=i' => \$count);

snippet     all_read_input
alias       marunomi
abbr        変数に一気に読み込む
	## $/(改行区切り)を無効にすることにより改行も含めて一括で変数dataに読み込める
	open (my $in,"<", "input.txt") or die $!;
	local $/ = undef;
	my $data = <$in>;
	print "$data\n";
	close($in);

snippet     md5
	use Digest::MD5 qw(md5 md5_hex md5_base64);
	say md5_hex("hoge");

snippet     binmode_stdin_stdout
abbr        STDOUT,STDINのエンコード指定
	binmode STDOUT, ":utf8";
	binmode STDIN,  ":utf8";

snippet     File::Basename
abbr        basename取る
	use File::Basename qw/basename dirname/;
	basename \$0;

snippet     form_sample
abbr        HTMLのフォームサンプル
	print <<"EOL_HTML";
	<html>
		<head>
			<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
			<title></title>
		</head>
		<body>
			<h1>インスタンスの停止/開始</h1>
			<form action="@{[basename \$0]}" method="post">
				<input type="hidden" name="postdata" value="start">
				<input type="submit" value="START">
			</form>
			<br />
			<form action="@{[basename \$0]}" method="post">
				<input type="hidden" name="postdata" value="stop">
				<input type="submit" value="STOP">
			</form>
			<hr>
			<div style="white-space: pre;">
	@messages
			</div>
		</body>
	</html>
	EOL_HTML

snippet     Digest::SHA
abbr        SHAハッシュ
	use Digest::SHA qw/sha512_hex/;
	print sha512_hex("あいうえお"),"\n";

snippet     use_JSON
abbr        json
	use JSON qw/encode_json decode_json/;
	my $json_in = '[{"name" : "Ken", "age" : 19}, {"name" : "Ken", "age" : 25}]';
	my $data = decode_json($json_in);
	my $json_out = encode_json($data);

snippet     oop
abbr        オブジェクト指向
	package Class;
	sub new{
	my $class = shift;
	# オブジェクトを作成して返す
	my $self = {
	X => 10,
	Y => 100,
	};
	return bless $self, $class;
	}
	sub method1{
	my $self = shift;
	print "$self->{X} : $self->{Y}\n";
	}

snippet     format
	my $rank=1;
	my $percent;
	my $count;
	my $name;
	format STDOUT_TOP =
	Rank  Name              Message    Percentage
	.
	format STDOUT =
	@##   @<<<<<<<<<<<<<<<  @######    @########%
	$rank, $name, $count, $percent
	.

snippet     HTTP::Tiny
abbr        HTTPリクエスト
	use HTTP::Tiny;
	my $response = HTTP::Tiny->new->get('http://example.com/');
	die "Failed!\n" unless $response->{success};
	print "$response->{status} $response->{reason}\n";
	while (my ($k, $v) = each %{$response->{headers}}) {
		for (ref $v eq 'ARRAY' ? @$v : $v) {
			print "$k: $_\n";
		}
	}
	print $response->{content} if length $response->{content};

snippet     DESTROY
abbr        デストラクタ
	sub DESTROY {
		my $self = shift;
		say "destory";
	}

snippet     YaasitaUtils
	use lib "/root/.myperl";
	use YaasitaUtils;
	slack_webhook('http://hogehoge...', "test!!");

snippet     Exporter
	use Exporter 'import'
	our @EXPORT_OK = qw/prefix1/;
	sub prefix1 {
		return "OK";
	}
	1;
