snippet     vuejs-template
abbr        Vue.jsのひな型
	var img = new Vue({
		el: '#picture-box',
		data: {
			boxes:  [{"name":"/hoge/huga","sorder":"2"},{"name":"/foo/bar","sorder":"1"}],
			showModal: false,
			ModalURL: ""
		},
		computed: {
			existImage: function(){
				if(this.boxes.length > 0){
					return true;
				}
				else {
					return false;
				}
			},
			sortBoxes: function () {
				return _.orderBy(this.boxes, 'sorder')
			}
		},
		methods: {
			OpenModal: function(url){
				this.ModalURL = url;
				this.showModal = true;
			}
		}
	});

snippet     json
abbr        jsonの変換
	JSON.parse('{"bar": 1234, "foo": undefined}');
	JSON.stringify({ x: 10, y: undefined, z: 20 });
	// 整形する奴
	JSON.stringify(messages, null, 4);

snippet     argv
alias       hikisuu
abbr        コマンドライン引数
	// 0 が実行ファイル、1が実行スクリプト
	process.argv[2];

snippet     promise
	exports.handler = async (event) => {
		const [s3_objects, instance_status]  = await Promise.all([count_s3_objects(), vm_status()]);
		if (s3_objects > 0 && instance_status === "TERMINATED"){
			const result = await vm.start();
		}
	};
	async function count_s3_objects() {
		const AWS = require('aws-sdk');
		const s3 = new AWS.S3();
		const params = {
			Bucket: "batch-gcp",
			MaxKeys: 100,
			Prefix: "to-gcp/"
		};
		let result = await s3.listObjectsV2(params).promise();
		return result.Contents.length;
	}
	async function vm_status() {
		const instance = await vm.get();
		return instance[0].metadata.status;
	}

snippet     console.log
alias       c
	console.log($0);

snippet     stdin1
abbr        標準入力読み取り1
	var stdin = process.openStdin();
	stdin.addListener("data", function(d) {
		console.log("you entered: [" + 
			d.toString().trim() + "]");
	});

snippet     stdin2
abbr        標準入力読み取り2
	const readline = require('readline');
	async function question_from_stdin(q){
		const rl = readline.createInterface({
			input: process.stdin,
			output: process.stdout
		});
		const result = await new Promise((resolv, reject) => {
			rl.question(q, (answer) => {
				rl.close();
				resolv(answer);
			});
		})
		return result;
	}
	(async function (){
		const indata = await question_from_stdin("OK? > ");
		console.log(\`*** \${indata} ***\`);
		process.stdout.write('hogehoge');
	})();

snippet     unixtime
	function unixtime() {
		const d1 = new Date();
		const d2 = d1.getTime();
		const d3 = parseInt(d2/1000);
		return String(d3);
	}

snippet     not_lf_print
abbr        改行無し出力
	// no require
	process.stdout.write('hogehoge');

snippet     nodejs-template
	"use strict";
	(async () => {
		// hugahuga();
	})();
	$0

snippet     fetch-template
	const result = await fetch(url, {
	method: "POST",
	headers: {
	  "Content-Type": "application/json"
	},
	body: JSON.stringify(data)

snippet     fetch-get-with-param
	const fetch = require('node-fetch');
	
	const url = new URL('https://hoge.com')
	const params = {lat:35.696233, long:139.570431} // or:
	//const params = [['lat', '35.696233'], ['long', '139.570431']]
	url.search = new URLSearchParams(params);
	const result = await fetch(url);
	const text = await result.text();

snippet     get-env
abbr        環境変数
	process.env.ENV_VARIABLE

snippet     load-json
abbr        JSONの読み込み
	const json = require('./test.json');

snippet     process.exit
abbr        fail exit
	process.exit(1);

snippet     sleep
	await sleep(1);
	function sleep(time){
	  return new Promise((resolv,reject) => {
		setTimeout(() => {
		  resolv();
		}, time * 1000);
	  });
	}

snippet     throw
	throw new Error("一般的なエラーだよ");
	throw new TypeError("型がちがうよ");
	throw new SyntaxError("文法おかしいよ");
	throw new URIError("URIちがうよ");

snippet     basename
	const path = require("path");
	const nodecmd = path.basename(process.argv[0]);

snippet     date
	const date = new Date(json[i].time*1000);
	date.getFullYear()

snippet     fs_write
	const fs = require('fs');
	fs.writeFileSync("out/target.json", JSON.stringify(newjson, null, 2));

snippet     fs_read
	const fs = require("fs");
	const content = fs.readFileSync("/tmp/b", "utf8");
	$0

snippet system_command
alias       child_process
	const { exec } = require('child_process');
	exec('ls', (error, stdout, stderr) => {
	  if (error) {
		console.error("[ERROR]");
	  }
	  // stdout
	});

snippet system_command_promiss
alias       child_process_promiss
	const util = require('util');
	const exec = util.promisify(require('child_process').exec);
	async function lsExample() {
	  const { stdout, stderr } = await exec('ls');
	  // program
	}
	lsExample();

snippet regex_match
	function get_num(str) {
	  const result = str.match(/^\d+/);
	  return parseInt(result[0]);
	}

snippet class
	module.exports = class Hoge {
	  constructor(option) {
		this.target = option;
	  }
	  async list() {
		hoge();
	  }
	  save(instance) {
		huga();
	  }
	};

snippet require
	const huga = require("./hoge.js");
	const a = new huga();

snippet parseInt
	parseInt("123");
