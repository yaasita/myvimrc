snippet     printf
	fmt.Printf("%v", a)

snippet     main.go-template
abbr        書き始め
	package main
	import (
		"fmt"
	)
	func main() {
		fmt.Println("hoge")
	}

snippet     read-line
abbr        1行ずつ読み込み
	package main
	import (
		"fmt"
		"bufio"
		"os"
		//"github.com/russross/blackfriday"
	)
	func main() {
		fmt.Println("start")
		fp, err := os.Open("/tmp/in.txt")
		if err != nil {
			panic(err)
		}
		defer fp.Close()
		scanner := bufio.NewScanner(fp)
		for scanner.Scan() {
			fmt.Printf("%v\n", len([]byte(scanner.Text())))
		}
		//fmt.Println(scanner)
		//fmt.Printf("%T\n",fp)
	}

snippet     test-template
abbr        テストのひな型
	package main
	
	import (
		"strings"
		"testing"
	)
	
	func TestReplace1(t *testing.T) {
		after := replace_url("http:")
		after = strings.TrimRight(after, "\n")
		if after != "- http:" {
			t.Errorf("after = %s", after)
		}
	}

snippet     error-check
abbr        エラーチェック
	fp_out, err := os.Create("てすと.txt")
	check(err, "書き込みに失敗しました")
	
	func check(e error, s string) {
		if e != nil {
			fmt.Fprintln(os.Stderr, s)
			var res string
			fmt.Println("何かキーを押してください")
			_, _ = fmt.Scanln(&res)
			panic(e)
		}
	}

snippet     each-line-read
abbr        一行ずつ読み込み
	var fp *os.File
	var err error
	fp, err = os.Open(os.Args[1])
	if err != nil {
		panic(err)
	}
	scanner := bufio.NewScanner(fp)
	var str []string
	for scanner.Scan() {
		str = append(str, scanner.Text())
	}
	if err := scanner.Err(); err != nil {
		panic(err)
	}
	fp.Close()
	// 書き出し
	fw, _ := os.Create(os.Args[1])
	for _, v := range str {
		replace_str := replace_url(v)
		fmt.Println(replace_str)
		fw.Write([]byte(replace_str + "\n"))
	}
	fw.Close()

snippet     regexp-replace
abbr        正規表現
	if http := regexp.MustCompile("^http"); http.MatchString(str) {
		return http.ReplaceAllString(str, "- http")
	}

snippet     write-file
abbr        ファイルの書き込み
	fp, err := os.OpenFile(*out, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, os.ModePerm)
	fp.Write(write_data)
